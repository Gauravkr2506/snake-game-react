{"version":3,"sources":["Containers/home.js","Components/snake.js","Components/food.js","Containers/game.js","App.js","serviceWorker.js","index.js"],"names":["home","props","className","style","textAlign","justifyContent","onClick","changeComponent","Snake","snake_dots","map","dot","i","left","top","borderRadius","key","food","getRandomCoordinates","Math","floor","random","initialState","speed","direction","snakeDots","App","state","onKeyDown","e","window","event","keyCode","setState","moveSnake","dots","head","length","push","shift","highest_score","setInterval","this","document","onkeydown","checkIfOutOfBorders","checkIfCollapsed","checkIfEat","onGameOver","snake","pop","forEach","enlargeSnake","increaseSpeed","newSnake","unshift","score","new_highest_score","alert","display","marginLeft","Component","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4de2bb90.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function home(props) {\r\n  return (\r\n    <div\r\n      className=\"container\"\r\n      style={{\r\n        textAlign: \"center\",\r\n        justifyContent: \"center\",\r\n      }}\r\n    >\r\n      <h1>Snake Game</h1>\r\n      <p>Choose level</p>\r\n      <button\r\n        onClick={() => props.changeComponent(\"GAME\", 160)}\r\n        className=\"button1\"\r\n      >\r\n        Easy\r\n      </button>\r\n      <button\r\n        onClick={() => props.changeComponent(\"GAME\", 80)}\r\n        className=\"button2\"\r\n      >\r\n        Medium\r\n      </button>\r\n      <button\r\n        onClick={() => props.changeComponent(\"GAME\", 40)}\r\n        className=\"button3\"\r\n      >\r\n        Tough\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Snake(props) {\r\n  return (\r\n    <div>\r\n      {props.snake_dots.map((dot, i) => {\r\n        const style = {\r\n          left: `${dot[0]}%`,\r\n          top: `${dot[1]}%`,\r\n          borderRadius: \"50%\",\r\n        };\r\n        return <div key={i} className=\"snake-dot\" style={style}></div>;\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function food(props) {\r\n  const style = {\r\n    left: `${props.food[0]}%`,\r\n    top: `${props.food[1]}%`,\r\n    borderRadius: \"50%\",\r\n  };\r\n\r\n  return <div className=\"snake-food\" style={style}></div>;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Snake from \"./../Components/snake\";\r\nimport Food from \"./../Components/food\";\r\nconst getRandomCoordinates = () => {\r\n  let min = 1;\r\n  let max = 98;\r\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\r\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\r\n  return [x, y];\r\n};\r\n\r\nconst initialState = {\r\n  food: getRandomCoordinates(),\r\n  speed: 200,\r\n  direction: \"RIGHT\",\r\n  snakeDots: [\r\n    [0, 0],\r\n    [2, 0],\r\n  ],\r\n};\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ...initialState,\r\n      highest_score: 0,\r\n      speed: props.speed || initialState.speed,\r\n    };\r\n    this.speed = props.speed || initialState.speed;\r\n  }\r\n  state = initialState;\r\n\r\n  componentDidMount() {\r\n    setInterval(this.moveSnake, this.state.speed);\r\n    document.onkeydown = this.onKeyDown;\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.checkIfOutOfBorders();\r\n    this.checkIfCollapsed();\r\n    this.checkIfEat();\r\n  }\r\n\r\n  onKeyDown = (e) => {\r\n    const { direction } = this.state;\r\n    e = e || window.event;\r\n    switch (e.keyCode) {\r\n      case 38:\r\n        if (direction != \"DOWN\") this.setState({ direction: \"UP\" });\r\n        break;\r\n      case 40:\r\n        if (direction != \"UP\") this.setState({ direction: \"DOWN\" });\r\n        break;\r\n      case 37:\r\n        if (direction != \"RIGHT\") this.setState({ direction: \"LEFT\" });\r\n        break;\r\n      case 39:\r\n        if (direction != \"LEFT\") this.setState({ direction: \"RIGHT\" });\r\n        break;\r\n    }\r\n  };\r\n\r\n  moveSnake = () => {\r\n    let dots = [...this.state.snakeDots];\r\n    let head = dots[dots.length - 1];\r\n\r\n    switch (this.state.direction) {\r\n      case \"RIGHT\":\r\n        head = [head[0] + 2, head[1]];\r\n        break;\r\n      case \"LEFT\":\r\n        head = [head[0] - 2, head[1]];\r\n        break;\r\n      case \"DOWN\":\r\n        head = [head[0], head[1] + 2];\r\n        break;\r\n      case \"UP\":\r\n        head = [head[0], head[1] - 2];\r\n        break;\r\n    }\r\n    dots.push(head);\r\n    dots.shift();\r\n    this.setState({\r\n      snakeDots: dots,\r\n    });\r\n  };\r\n\r\n  checkIfOutOfBorders() {\r\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\r\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\r\n      this.onGameOver();\r\n    }\r\n  }\r\n\r\n  checkIfCollapsed() {\r\n    let snake = [...this.state.snakeDots];\r\n    let head = snake[snake.length - 1];\r\n    snake.pop();\r\n    snake.forEach((dot) => {\r\n      if (head[0] == dot[0] && head[1] == dot[1]) {\r\n        this.onGameOver();\r\n      }\r\n    });\r\n  }\r\n\r\n  checkIfEat() {\r\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\r\n    let food = this.state.food;\r\n    if (head[0] == food[0] && head[1] == food[1]) {\r\n      this.setState({\r\n        food: getRandomCoordinates(),\r\n      });\r\n      this.enlargeSnake();\r\n      this.increaseSpeed();\r\n    }\r\n  }\r\n\r\n  enlargeSnake() {\r\n    let newSnake = [...this.state.snakeDots];\r\n    newSnake.unshift([]);\r\n    this.setState({\r\n      snakeDots: newSnake,\r\n    });\r\n  }\r\n\r\n  increaseSpeed() {\r\n    if (this.state.speed > 10) {\r\n      this.setState({\r\n        speed: this.state.speed - 10,\r\n      });\r\n    }\r\n  }\r\n\r\n  onGameOver() {\r\n    const { snakeDots, highest_score } = this.state;\r\n    let score = snakeDots.length - initialState.snakeDots.length;\r\n    let new_highest_score = highest_score;\r\n    if (score > highest_score) new_highest_score = score;\r\n    alert(`Game Over`);\r\n    this.setState({\r\n      ...initialState,\r\n      highest_score: new_highest_score,\r\n      speed: this.speed,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div style={{ display: \"flex\" }}>\r\n          <h1>\r\n            Score:{this.state.snakeDots.length - initialState.snakeDots.length}\r\n          </h1>\r\n          <h1 style={{ marginLeft: \"auto\" }}>\r\n            Highest Score:{this.state.highest_score}\r\n          </h1>\r\n        </div>\r\n\r\n        <div className=\"game-area\">\r\n          <Snake snake_dots={this.state.snakeDots} />\r\n          <Food food={this.state.food} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from \"react\";\nimport Home from \"./Containers/home\";\nimport Game from \"./Containers/game\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { component: \"HOME\", speed: 500 };\n  }\n  changeComponent = (component, speed) => {\n    this.setState({ component, speed });\n  };\n  render() {\n    const { component, speed } = this.state;\n    return component === \"HOME\" ? (\n      <Home changeComponent={this.changeComponent} />\n    ) : (\n      <Game changeComponent={this.changeComponent} speed={speed} />\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}